#!/usr/bin/bash

set -e # Exit the script on error
set -m # Run all jobs in their own process group

if ! type "python" > /dev/null; then
    echo "This script requires python"
    exit 1
fi

if ! type "psql" > /dev/null; then
    echo "This script requires psql"
    exit 1
fi

if [[ "$1" == "-h" ]] || [[ "$1" == "--help" ]]; then
    printf "Usage: dbi <service/pod>\n"
    printf "dbi is an helper to connect to cloudnative-pg databases\n"
    printf "Example:\n"
    printf "    dbi --r  (alias for services/postgres-r) (default)\n"
    printf "    dbi --ro (alias for services/postgres-ro)\n"
    printf "    dbi --rw (alias for services/postgres-rw)\n"
    printf "    dbi postgres-X (X is a number)\n"
    printf "\n"
    exit
fi

if [[ "$KUBECONFIG" == "" ]]; then
    echo "No KUBECONFIG env var set"
    exit 1
fi

forward_target=${1:-"services/postgres-r"}
case $forward_target in
    "--r")
        forward_target="services/postgres-r"
        ;;
    "--ro")
        forward_target="services/postgres-ro"
        ;;
    "--rw")
        forward_target="services/postgres-rw"
        ;;
esac

creds=$(kubectl get secrets -n db postgres-cluster --template='{{.data.username}},{{.data.password}},{{.data.database}}')
IFS=, read -r username password database <<< "$creds"

username=$(echo "$username" | base64 -d)
password=$(echo "$password" | base64 -d)
database=$(echo "$database" | base64 -d)

# Get a random available port
bind_port=$(python -c 'import socket; s=socket.socket(); s.bind(("", 0)); print(s.getsockname()[1]); s.close()');
connection_str="postgresql://$username:$password@localhost:$bind_port/$database"

cmd="kubectl port-forward -n db $forward_target $bind_port:5432"
echo "Port forwarding localhost:$bind_port => $forward_target:5432"
eval "$cmd > /dev/null 2>&1 &"

# Ensure that the port forward is killed when script exits
trap '{
    pkill -f "$cmd"
}' EXIT

# Wait for port forward
sleep 0.5

psqlrc="/tmp/.psql-dbi-$bind_port"

if [[ -e ~/.psqlrc ]]; then
    cp ~/.psqlrc "$psqlrc"
fi

prefix="${forward_target//services\//}"

cat << EOF >> "$psqlrc"
\set PROMPT1 '($prefix) %/%R%x%# '
EOF

PSQLRC=$psqlrc psql "$connection_str"
