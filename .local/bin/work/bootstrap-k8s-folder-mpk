#!/usr/bin/bash

if [[ -d .k8s ]]; then
    echo "A folder named '.k8s' already exists in the directory"
    exit 1
fi

appName=$1
appTestDomain=$2
appProdDomain=$3

if [[ "$appName" == "" ]]; then
    defaultAppName=$(basename $(pwd))
    read -p "appName (blank = $defaultAppName): " appName
    [[ "$appName" == "" ]] && appName=$defaultAppName
fi

if [[ "$appTestDomain" == "" ]]; then
    appTestDomain=""
    read -p "appTestDomain: " appTestDomain
fi

if [[ "$appProdDomain" == "" ]]; then
    appProdDomain=""
    read -p "appProdDomain: " appProdDomain
fi

mkdir .k8s .k8s/argo .k8s/helm .k8s/helm/templates

# Argo

function getArgoApplicationYaml() {
    imageTag=$1
    valuesFile=$2

    cat <<EOF
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: ${appName}
  namespace: argocd
  finalizers:
    - resources-finalizer.argocd.argoproj.io
  labels:
    app/name: ${appName}
  annotations:
    argocd-image-updater.argoproj.io/image-list: app=mpkdev/${appName}:${imageTag}
    argocd-image-updater.argoproj.io/app.update-strategy: digest
spec:
  project: default
  source:
    repoURL: https://bitbucket.org/matpriskollen/${appName}.git
    targetRevision: main
    path: .k8s/helm
    helm:
      valueFiles:
        - ${valuesFile}
  destination:
    server: https://kubernetes.default.svc
    namespace: apps
  syncPolicy:
    automated:
      selfHeal: true
    syncOptions:
      - CreateNamespace=true
      - PruneLast=true
EOF
}

applicationTestYaml=$(getArgoApplicationYaml "main" "values-test.yaml")
applicationProdYaml=$(getArgoApplicationYaml "release" "values-prod.yaml")

echo "$applicationTestYaml" > .k8s/argo/application-test.yaml
echo "$applicationProdYaml" > .k8s/argo/application-prod.yaml

# Helm

cat << EOF > .k8s/helm/Chart.yaml
apiVersion: v2
name: $appName
description: A Helm chart for $appName.
type: application
version: 0.0.1
appVersion: 0.0.1
EOF

function getValuesYaml() {
    tag=${1:-}
    deployEnv=${2:-}
    domain=${3:-}
    cat << EOF
replicaCount: 1

image:
  repository: mpkdev/$appName
  tag: "$tag"

deployEnv: "$deployEnv"

domains:
  - "$domain"
EOF
}

valuesTemplateYaml=$(getValuesYaml "" "" "")
valuesTestYaml=$(getValuesYaml "main" "test" "$appTestDomain")
valuesProdYaml=$(getValuesYaml "main" "prod" "$appProdDomain")

echo "$valuesTemplateYaml" > .k8s/helm/values.yaml
echo "$valuesTestYaml" > .k8s/helm/values-test.yaml
echo "$valuesProdYaml" > .k8s/helm/values-prod.yaml

cat << EOF > .k8s/helm/templates/deployment.yaml
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Chart.Name }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ .Chart.Name }}
  template:
    metadata:
      labels:
        app: {{ .Chart.Name }}
    spec:
      imagePullSecrets:
        - name: registry-secret-mpkdev
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: IfNotPresent
          envFrom:
            - configMapRef:
                name: "{{ .Chart.Name }}-envvars"
          ports:
            - name: http
              containerPort: 3000
EOF

cat << EOF > .k8s/helm/templates/ingress.yaml
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: {{ .Chart.Name }}
  namespace: apps
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-production
    cert-manager.io/issue-temporary-certificate: "true"
    ingress.pomerium.io/allow_public_unauthenticated_access: "true"
    ingress.kubernetes.io/ssl-redirect: "true"
spec:
  rules:
    {{ range .Values.domains }}
    - host: {{ . }}
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: {{ $.Chart.Name }}
                port:
                  number: 3000
    {{ end }}
  tls:
    - hosts:
        {{ range .Values.domains }}
        - {{ . }}
        {{ end }}
      secretName: {{ .Chart.Name }}-tls
EOF

cat << EOF > .k8s/helm/templates/service.yaml
---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Chart.Name }}
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 3000
      targetPort: http
      protocol: TCP
  selector:
    app: {{ .Chart.Name }}
EOF

cat << EOF > .k8s/helm/templates/envvars.yaml
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: "{{ .Chart.Name }}-envvars"
data:
  TZ: "Europe/Stockholm"
{{- if eq .Values.deployEnv "test"}}
{{- end }}
{{- if eq .Values.deployEnv "prod"}}
{{- end }}
EOF

if [[ -e "bitbucket-pipelines.yml" ]]; then
    cat << 'EOF' >> bitbucket-pipelines.yml
# bootstrap-k8s-folder-mpk
definitions:
  steps:
    - step: &buildTagPush
        name: Build, tag and push
        services:
          - docker
        script:
          - BRANCH=$(echo $BITBUCKET_BRANCH | sed 's/\//-/g')
          - IMAGE_NAME=mpkdev/${BITBUCKET_REPO_SLUG}
          - VERSION="${BRANCH}-${BITBUCKET_COMMIT}"

          - docker build -t ${IMAGE_NAME}:${VERSION} --build-arg NPM_TOKEN=$NPM_TOKEN .

          - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
          - docker push ${IMAGE_NAME}:${VERSION}

          - docker tag ${IMAGE_NAME}:${VERSION} ${IMAGE_NAME}:${BITBUCKET_COMMIT}
          - docker push ${IMAGE_NAME}:${BITBUCKET_COMMIT}
          - docker tag ${IMAGE_NAME}:${VERSION} ${IMAGE_NAME}:${BRANCH}
          - docker push ${IMAGE_NAME}:${BRANCH}

pipelines:
  branches:
    main:
      - step: *buildTagPush
      - step:
          name: Deploy to new prod
          trigger: manual
          script:
            - export RELEASE_TAG=release-$(date '+%y%m%dT%H%M%S')
            - git tag ${RELEASE_TAG} ${BITBUCKET_COMMIT}
            - git push origin ${RELEASE_TAG}
  tags:
    'release-*':
      - step:
          name: Tag and push a release
          services:
            - docker
          script:
            - IMAGE_NAME=mpkdev/$BITBUCKET_REPO_SLUG
            - REL_VERSION=${BITBUCKET_TAG#*-}

            - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
            - docker pull ${IMAGE_NAME}:${BITBUCKET_COMMIT}
            - docker tag ${IMAGE_NAME}:${BITBUCKET_COMMIT} ${IMAGE_NAME}:${BITBUCKET_TAG}
            - docker tag ${IMAGE_NAME}:${BITBUCKET_COMMIT} ${IMAGE_NAME}:release
            - docker push ${IMAGE_NAME}:${BITBUCKET_TAG}
            - docker push ${IMAGE_NAME}:release

EOF
else
    cat << 'EOF' > bitbucket-pipelines.yml
image: atlassian/default-image:2.14

definitions:
  services:
    docker:
      memory: 3072
  steps:
    - step: &buildTagPush
        name: Build, tag and push
        services:
          - docker
        script:
          - BRANCH=$(echo $BITBUCKET_BRANCH | sed 's/\//-/g')
          - IMAGE_NAME=mpkdev/${BITBUCKET_REPO_SLUG}
          - VERSION="${BRANCH}-${BITBUCKET_COMMIT}"

          - docker build -t ${IMAGE_NAME}:${VERSION} --build-arg NPM_TOKEN=$NPM_TOKEN .

          - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
          - docker push ${IMAGE_NAME}:${VERSION}

          - docker tag ${IMAGE_NAME}:${VERSION} ${IMAGE_NAME}:${BITBUCKET_COMMIT}
          - docker push ${IMAGE_NAME}:${BITBUCKET_COMMIT}
          - docker tag ${IMAGE_NAME}:${VERSION} ${IMAGE_NAME}:${BRANCH}
          - docker push ${IMAGE_NAME}:${BRANCH}

pipelines:
  branches:
    main:
      - step: *buildTagPush
      - step:
          name: Deploy to new prod
          trigger: manual
          script:
            - export RELEASE_TAG=release-$(date '+%y%m%dT%H%M%S')
            - git tag ${RELEASE_TAG} ${BITBUCKET_COMMIT}
            - git push origin ${RELEASE_TAG}
  tags:
    'release-*':
      - step:
          name: Tag and push a release
          services:
            - docker
          script:
            - IMAGE_NAME=mpkdev/$BITBUCKET_REPO_SLUG
            - REL_VERSION=${BITBUCKET_TAG#*-}

            - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
            - docker pull ${IMAGE_NAME}:${BITBUCKET_COMMIT}
            - docker tag ${IMAGE_NAME}:${BITBUCKET_COMMIT} ${IMAGE_NAME}:${BITBUCKET_TAG}
            - docker tag ${IMAGE_NAME}:${BITBUCKET_COMMIT} ${IMAGE_NAME}:release
            - docker push ${IMAGE_NAME}:${BITBUCKET_TAG}
            - docker push ${IMAGE_NAME}:release
EOF
fi

if [[ "$EDITOR" != "" ]]; then
    $EDITOR bitbucket-pipelines.yml
fi
